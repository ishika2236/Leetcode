/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void findDepthAndParent(TreeNode* root, int x, int depth, TreeNode* parent, int& depthX, TreeNode*& parentX) {
        if (root == nullptr)
            return;
        
        if (root->val == x) {
            depthX = depth;
            parentX = parent;
            return;
        }
        
        findDepthAndParent(root->left, x, depth + 1, root, depthX, parentX);
        findDepthAndParent(root->right, x, depth + 1, root, depthX, parentX);
    }
    
public:
    bool isCousins(TreeNode* root, int x, int y) {
        int depthX = -1, depthY = -1;
        TreeNode* parentX = nullptr, *parentY = nullptr;

        findDepthAndParent(root, x, 0, nullptr, depthX, parentX);
        findDepthAndParent(root, y, 0, nullptr, depthY, parentY);

        return (depthX == depthY) && (parentX != parentY);
    }
};
