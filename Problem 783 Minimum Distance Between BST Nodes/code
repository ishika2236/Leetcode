/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDiffInBST(TreeNode* root) {
        int prev_val = -1; 
        int diff = INT_MAX; 

        if (root == nullptr) {
            return diff;
        }

       
        inOrderTraversal(root, prev_val, diff);

        return diff;
    }

private:
    void inOrderTraversal(TreeNode* node, int& prev_val, int& diff) {
        if (node == nullptr) {
            return;
        }

        // Traverse the left subtree.
        inOrderTraversal(node->left, prev_val, diff);

        // Calculate the difference with the previous node's value (if it exists).
        if (prev_val != -1) {
            int current_diff = node->val - prev_val;
            diff = min(diff, current_diff);
        }

        // Update the previous node's value to the current node's value.
        prev_val = node->val;

        // Traverse the right subtree.
        inOrderTraversal(node->right, prev_val, diff);
    }
};
