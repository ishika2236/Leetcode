#include <vector>
using namespace std;

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> solve(ListNode* root) {
        vector<int> v;
        while (root) {
            v.push_back(root->val);
            root = root->next;
        }
        return v;
    }

    TreeNode* maketree(vector<int>& v, int start, int end) {
        if (start > end) {
            return nullptr;
        }

        int mid = start + (end - start) / 2;
        TreeNode* root = new TreeNode(v[mid]);
        root->left = maketree(v, start, mid - 1);
        root->right = maketree(v, mid + 1, end);
        return root;
    }

public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> v = solve(head);
        return maketree(v, 0, v.size() - 1);
    }
};
