// #include <queue>
// using namespace std;

// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
// class Solution {
// public:
//     TreeNode* lcaDeepestLeaves(TreeNode* root) {
//         if (root == nullptr) return nullptr;

//         queue<TreeNode*> q;
//         q.push(root);
//         TreeNode* lca = nullptr;

//         while (!q.empty()) {
//             int size = q.size();
//             lca = nullptr; // Reset lca for each level

//             for (int i = 0; i < size; i++) {
//                 TreeNode* temp = q.front();
//                 q.pop();

//                 if (i == 0) lca = temp; // Keep track of the first node at each level

//                 if (temp->left) q.push(temp->left);
//                 if (temp->right) q.push(temp->right);
//             }
//         }

//         return lca;
//     }
// };
#include <queue>
using namespace std;

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* node) {
        if (node == nullptr) return 0;
        return max(maxDepth(node->left), maxDepth(node->right)) + 1;
    }

    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if (root == nullptr) return nullptr;

        int leftDepth = maxDepth(root->left);
        int rightDepth = maxDepth(root->right);

        if (leftDepth == rightDepth) {
            return root;
        } else if (leftDepth > rightDepth) {
            return lcaDeepestLeaves(root->left);
        } else {
            return lcaDeepestLeaves(root->right);
        }
    }
};
