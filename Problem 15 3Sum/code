class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;

        if (nums.size() < 3) {
            return result;  // Not enough elements to form a triplet
        }

        sort(nums.begin(), nums.end());  // Sort the vector in ascending order

        for (int i = 0; i < nums.size() - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;  // Skip duplicates to avoid duplicate triplets
            }

            int left = i + 1;
            int right = nums.size() - 1;

            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum == 0) {
                    result.push_back({ nums[i], nums[left], nums[right] });

                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;  // Skip duplicates
                    }
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;  // Skip duplicates
                    }

                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;  // Move the left pointer to increase the sum
                } else {
                    right--;  // Move the right pointer to decrease the sum
                }
            }
        }

        return result;
    }
};
