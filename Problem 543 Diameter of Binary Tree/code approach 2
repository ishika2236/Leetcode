#include <algorithm>

// struct TreeNode {
//     int val;
//     TreeNode* left;
//     TreeNode* right;
//     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//     TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
// };

class Solution {
public:

    pair<int,int>diameter(TreeNode* root){
        if(root==nullptr){
            pair<int,int>p= make_pair(0,0);
            return p;
        }

        pair<int,int> left= diameter(root->left);
        pair<int,int>right= diameter(root->right);

        int op1= left.second;
        int op2= right.second;

        int op3= left.first + right.first ;

        pair<int,int>ans;

        ans.first= max(left.first, right.first)+ 1;
        ans.second= max(op1, max(op2,op3));

        return ans;


    }

    int diameterOfBinaryTree(TreeNode* root) {
        

        return diameter(root).second;
    }
};
