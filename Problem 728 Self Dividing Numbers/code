#include <unordered_map>
#include <vector>
#include <climits>

class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int, int> freq_map;
        unordered_map<int, pair<int, int>> occurrence_map;
        int max_degree = 0;

        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            freq_map[num]++;
            if (occurrence_map.find(num) == occurrence_map.end()) {
                occurrence_map[num] = make_pair(i, i);
            } else {
                occurrence_map[num].second = i;
            }

            max_degree = max(max_degree, freq_map[num]);
        }

        int min_len = INT_MAX;

        for (auto entry : freq_map) {
            if (entry.second == max_degree) {
                int num = entry.first;
                int len = occurrence_map[num].second - occurrence_map[num].first + 1;
                min_len = min(min_len, len);
            }
        }

        return min_len;
    }
};
