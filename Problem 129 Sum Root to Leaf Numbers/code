/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> solve(TreeNode* root, int sum) {
        vector<int> ans;
        if (root == nullptr) {
            return ans;
        }

        if (root->left == nullptr && root->right == nullptr) {
            ans.push_back(sum * 10 + root->val);
            return ans;
        }

        vector<int> left_sums = solve(root->left, sum * 10 + root->val);
        vector<int> right_sums = solve(root->right, sum * 10 + root->val);

        ans.insert(ans.end(), left_sums.begin(), left_sums.end());
        ans.insert(ans.end(), right_sums.begin(), right_sums.end());

        return ans;
    }

    int sumNumbers(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }

        vector<int> v = solve(root, 0);
        int solution = 0;
        for (int i = 0; i < v.size(); i++) {
            solution += v[i];
        }
        return solution;
    }
};
