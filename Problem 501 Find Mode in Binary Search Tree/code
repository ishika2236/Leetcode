/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> m;
        int modeFrequency = 0;
        vector<int> modes;

        inorderTraversal(root, m);

        for (const auto& entry : m) {
            if (entry.second > modeFrequency) {
                modeFrequency = entry.second;
            }
        }

        for (const auto& entry : m) {
            if (entry.second == modeFrequency) {
                modes.push_back(entry.first);
            }
        }

        return modes;
    }

private:
    void inorderTraversal(TreeNode* root, unordered_map<int, int>& m) {
        if (root == nullptr) {
            return;
        }

        inorderTraversal(root->left, m);
        m[root->val]++;

        inorderTraversal(root->right, m);
    }
};
