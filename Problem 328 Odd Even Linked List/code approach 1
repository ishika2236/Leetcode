class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        ListNode* odd = new ListNode(0);
        ListNode* even = new ListNode(0);
        ListNode* oddCurr = odd;
        ListNode* evenCurr = even;
        ListNode* curr = head;
        int count = 1;

        while (curr != nullptr) {
            if (count % 2 == 1) {
                oddCurr->next = curr;
                oddCurr = oddCurr->next;
            } else {
                evenCurr->next = curr;
                evenCurr = evenCurr->next;
            }

            curr = curr->next;
            count++;
        }

        oddCurr->next = even->next;
        evenCurr->next = nullptr;

        ListNode* result = odd->next;
        delete odd;
        delete even;

        return result;
    }
};
