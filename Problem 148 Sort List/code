class Solution {
    ListNode* findmid(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head->next;

        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* merge(ListNode* left, ListNode* right) {
        ListNode* ans = new ListNode(0);
        ListNode* temp = ans;

        while (left != nullptr && right != nullptr) {
            if (left->val <= right->val) {
                temp->next = left;
                left = left->next;
            } else {
                temp->next = right;
                right = right->next;
            }
            temp = temp->next;
        }

        if (left != nullptr) {
            temp->next = left;
        }

        if (right != nullptr) {
            temp->next = right;
        }

        ans = ans->next;
        return ans;
    }

public:
    ListNode* sortList(ListNode* head) {
        // Base case
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        // Break linked list into two halves
        ListNode* mid = findmid(head);
        ListNode* left = head;
        ListNode* right = mid->next;
        mid->next = nullptr;

        // Recursive calls to sort both lists
        left = sortList(left);
        right = sortList(right);

        // Merge both left and right
        ListNode* result = merge(left, right);
        return result;
    }
};
