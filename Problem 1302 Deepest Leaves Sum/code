#include <iostream>
#include <queue>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }

        int sum = 0;
        std::queue<TreeNode*> nodesQueue;
        nodesQueue.push(root);

        while (!nodesQueue.empty()) {
            int size = nodesQueue.size();
            sum = 0; // Reset sum for each level

            for (int i = 0; i < size; ++i) {
                TreeNode* node = nodesQueue.front();
                nodesQueue.pop();

                sum += node->val;

                if (node->left != nullptr) {
                    nodesQueue.push(node->left);
                }

                if (node->right != nullptr) {
                    nodesQueue.push(node->right);
                }
            }
        }

        return sum;
    }
};
