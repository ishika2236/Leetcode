/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
        if (head == nullptr)
            return nullptr;

        Node* curr = head;

        while (curr != nullptr) {
            if (curr->child != nullptr) {
                Node* nextNode = curr->next;
                Node* childList = flatten(curr->child);

                // Connect the child list to the current node
                curr->next = childList;
                childList->prev = curr;
                curr->child = nullptr;

                // Find the tail of the child list
                Node* tail = childList;
                while (tail->next != nullptr)
                    tail = tail->next;

                // Connect the tail to the next node
                tail->next = nextNode;
                if (nextNode != nullptr)
                    nextNode->prev = tail;
            }

            curr = curr->next;
        }

        return head;
    }
};

