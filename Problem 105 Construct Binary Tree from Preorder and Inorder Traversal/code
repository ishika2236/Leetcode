/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
    int findposition(vector<int>inorder, int ele){
        for(int i=0;i<inorder.size();i++){
            if(inorder[i]==ele){
                return i;
            }
        }
        return -1;
    }

    TreeNode* solve(vector<int>& preorder, vector<int> inorder, int& index, int inorderstart, int inorderend){
    if(index >= preorder.size() || inorderstart > inorderend){
        return nullptr;
    }
    int ele = preorder[index++];
    TreeNode* root = new TreeNode(ele);

    int pos = findposition(inorder, ele);

    root->left = solve(preorder, inorder, index, inorderstart, pos - 1);
    root->right = solve(preorder, inorder, index, pos + 1, inorderend);
    return root;
}

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n= inorder.size();
        int index=0;
        TreeNode* ans= solve(preorder, inorder,index,0,n-1);
        return ans;
        
    }
};