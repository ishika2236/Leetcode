class Solution {
public:
    int minDepth(TreeNode* root) {
        if (root == nullptr) {
            return 0; // Return 0 for nullptr nodes, representing no depth contribution.
        }

        // If we reach a leaf node, return the current depth (1).
        if (root->left == nullptr && root->right == nullptr) {
            return 1;
        }

        int leftDepth = minDepth(root->left);
        int rightDepth = minDepth(root->right);

        // If one of the subtrees is empty, return the depth of the non-empty subtree + 1.
        if (root->left == nullptr || root->right == nullptr) {
            return max(leftDepth, rightDepth) + 1;
        }

        // Return the minimum depth of the two subtrees + 1.
        return min(leftDepth, rightDepth) + 1;
    }
};
