/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    // int height(TreeNode* root){
    //     if(root==nullptr){
    //         return 0;
    //     }

    //     int left = height(root->left);
    //     int right = height(root->right);

    //     return std::max(left, right) + 1;
    // }
    pair<bool,int> balanced(TreeNode* root){
        if(root==nullptr){
            pair<int,int>p= make_pair(true,0);
            return p;
        }
        pair<bool,int>left= balanced(root->left);
        pair<bool,int> right= balanced(root->right);

        bool diff= std::abs(left.second- right.second)<=1;

        pair<bool,int> ans;
        ans.first=  left.first && right.first && diff;
        ans.second=std::max(left.second, right.second)+1;

        return ans;

    }
public:
    bool isBalanced(TreeNode* root) {
        // if(root==nullptr){
        //     return true;
        // }
       
        // bool left = isBalanced(root->left);
        // bool right = isBalanced(root->right);

        // bool diff = std::abs(height(root->left) - height(root->right)) <= 1;

        // return (left && right && diff);
        return(balanced(root).first);
    }
};
