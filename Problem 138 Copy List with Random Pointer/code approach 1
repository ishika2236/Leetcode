/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:

    Node* copyRandomList(Node* head) {
        if (head == nullptr) {
            return nullptr;
        }

        // Step 1: Clone nodes and insert them next to the original nodes
        Node* temp = head;
        while (temp != nullptr) {
            Node* cloneNode = new Node(temp->val);
            cloneNode->next = temp->next;
            temp->next = cloneNode;
            temp = cloneNode->next;
        }

        // Step 2: Assign random pointers to the cloned nodes
        temp = head;
        while (temp != nullptr) {
            if (temp->random != nullptr) {
                temp->next->random = temp->random->next;
            }
            temp = temp->next->next;
        }

        // Step 3: Separate the original list and the clone list
        Node* cloneHead = head->next;
        Node* cloneTemp = cloneHead;
        temp = head;

        while (temp != nullptr) {
            temp->next = temp->next->next;
            if (cloneTemp->next != nullptr) {
                cloneTemp->next = cloneTemp->next->next;
            }
            temp = temp->next;
            cloneTemp = cloneTemp->next;
        }
        //return clone list
        return cloneHead;
    }

    

};